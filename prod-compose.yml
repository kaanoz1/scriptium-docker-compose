services:
  caddy:
    image: caddy:2.8
    container_name: caddy
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN= ${DOMAIN}
      - LETSENCRYPT_EMAIL= ${LETSENCRYPT_EMAIL}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./fallback:/srv/fallback:ro
    networks:
      - scriptium-net
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - scriptium-net
    restart: unless-stopped

  sql:
    build:
      context: ./
      dockerfile: SqlDockerfile
    container_name: sql
    environment:
      SA_PASSWORD: ${SA_PASSWORD}
      ACCEPT_EULA: ${ACCEPT_EULA}

    networks:
      - scriptium-net
    volumes:
      - scriptium-db-data:/var/opt/mssql
    restart: unless-stopped

  backend:
    build:
      context: ./scriptium-backend
      dockerfile: Dockerfile
    container_name: scriptium-backend
    depends_on:
      - sql
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: ${DB_CONNECTION_STRING}
      ASPNETCORE_URLS: http://0.0.0.0:5000
    expose:
      - "5000"
    networks:
      - scriptium-net
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/health"]
      interval: 15s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  frontend:
    build:
      context: ./scriptium-frontend
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_SERVER_URL: ${NEXT_PUBLIC_SERVER_URL}
        PRIVATE_SERVER_URL: ${PRIVATE_SERVER_URL}
        REDIS_URL: ${REDIS_URL}
    container_name: scriptium-frontend
    depends_on:
      - backend
    environment:
      PRIVATE_SERVER_URL: ${PRIVATE_SERVER_URL}
      REDIS_URL: ${REDIS_URL}
      PORT: 3000
    expose:
      - "3000"
    networks:
      - scriptium-net
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 15s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  discord-bot:
    build:
      context: ./scriptium-discord-bot
      dockerfile: Dockerfile
    container_name: discord-bot
    environment:
      NODE_ENV: production
      DISCORD_BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      SERVER_URL: ${SERVER_URL}
      WEBSITE_URL: ${WEBSITE_URL}
      REDIS_URL: ${REDIS_URL}
    networks:
      - scriptium-net
    restart: unless-stopped

networks:
  scriptium-net:
    driver: bridge

volumes:
  scriptium-db-data:
    external: true
    name: scriptium-db-data
  caddy_data:
  caddy_config:
  redis_data:
